#!/usr/bin/env perl

# Sync Antelope and related directory trees

use warnings;
use strict;
use Getopt::Std;

# "constants"
my $TRUE=1;
my $FALSE=0;

# Defaults
my $excludeFile="<%= $confdir %>/rsync_exclude";
my $includeFile="<%= $confdir %>/rsync_include";
my $debug=$FALSE;
my $quiet=$FALSE;
my $verbose=$FALSE;
my $dryRun=$FALSE;
my $rsyncBin="<%= $rsync_bin %>";
my $sourceHost="<%= $sync_host %>";
<% if $sync_host and ($sync_host =~ /^rsync:\/\// or $sync_host =~ /::$/) { -%>
my @rsyncOpts=("-a", '--partial', "--delete");
<% } else { -%>
my $sourceUser="<%= $sync_user %>";
my @rsyncOpts=("-a", '--partial', "--delete", "--rsh=ssh");
<% } -%>

# Other globals
my %option = ();
my @syncdirs = (<%= $sync_dirs.map |$d| { "\"${d}\"" }.join(', ') %>);
my @services = (<%=
if $antelope_services and $antelope_services != '' {
  $antelope_services.split(',').map |$d| { "\"${d}\"" }.join(', ')
} else {
  ''
}
%>);
my $svcStop  = $TRUE;
my $svcStart = $TRUE;

# Static Strings
my $usageHelp="Usage: $0";
my $badOptionHelp="Option not recognised";
my $debugHelp="-d Turns on debugging mode";
my $dryRunHelp="-n Runs Rsync in dry run mode";
my $svcStopHelp="-S Do not stop or restart any antelope services stopped by $0";
my $svcStartHelp="-s Do not restart any antelope services stopped by $0";
my $excludeFileHelp="-e Path to Exclude file (default: $excludeFile)";
my $includeFileHelp="-i Path to Include file (default: $includeFile)";
my $quietHelp="-q Runs rsync in quiet mode";
my $verboseHelp="-v Runs rsync in verbose mode";

# Help subroutine
sub printHelpAndExit {
  print $usageHelp."\n";
  print $debugHelp."\n";
  print $dryRunHelp."\n";
  print $svcStopHelp."\n";
  print $svcStartHelp."\n";
  print $excludeFileHelp."\n";
  print $includeFileHelp."\n";
  print $quietHelp."\n";
  print $verboseHelp."\n";
  if ($1) { exit $1; }
  else    { exit 1;  }
}
# help for bad options
sub printErrorHelpAndExit {
  my $errstring=shift;
  print STDERR "ERROR: $errstring\n";
  printHelpAndExit(1);
}

sub serviceStop ( $ ) {
  my $service=shift;
  my $reason="Shut down to update Antelope per $0";
  my $cmd = "/etc/init.d/$service stop $reason";
  if ( $svcStop == $TRUE ) {
    if ( $dryRun == $TRUE ) { print "Would run '$cmd'\n"; }
    else                    { system($cmd); }
  } else {
    print "Not stopping ${service} per option '-S'\n";
  }
}

sub serviceStart ( $ ) {
  my $service=shift;
  my $cmd = "/etc/init.d/$service start";
  if ( $svcStart == $TRUE ) {
    if ( $dryRun == $TRUE ) { print "Would run '$cmd'\n"; }
    else                    { system($cmd); }
  } else {
      print "Not restarting ${service} per option '-s' or '-S'\n";
  }
}

sub treeSync ( $ ) {
  my $syncdir=shift;
<% if $sync_host and ($sync_host =~ /^rsync:\/\// or $sync_host =~ /::$/) { -%>
  my $srcpath= $sourceHost . $syncdir . "/";
<% } else { -%>
  my $srcpath= $sourceUser . "@" . $sourceHost . ":" . $syncdir . "/";
<% } -%>
  my $destpath=$syncdir;
  my @cmd = $rsyncBin;
  push @cmd, @rsyncOpts;
  push @cmd, $srcpath, $destpath;
  print join (" ", @cmd), "\n" if $debug;
  system (@cmd);
}

sub printOptionSummary {
  print "Options set are:\n";
  print "  debug=$debug\n";
  print "  dryRun=$dryRun\n";
  print "  exclude file = $excludeFile\n";
  print "  include file = $includeFile\n";
  print "  quiet = $quiet\n";
  print "  verbose = $verbose\n";
  print "  svcStart = $svcStart\n";
}
#
# Parse Options
#
getopts("vhdnsSe:i:q", \%option) || printHelpAndExit(1);
printHelpAndExit()        if $option{h};
$svcStart    = $FALSE     if $option{s};
$excludeFile = $option{e} if $option{e};
$includeFile = $option{i} if $option{i};
$quiet       = $TRUE      if $option{q};
$verbose     = $TRUE      if $option{v};
if ($option{S}) {
  $svcStop     = $FALSE;
  $svcStart    = $FALSE;
}
if ($option{d}) { $debug=$TRUE;  }
if ($option{n}) { $dryRun=$TRUE; }

printOptionSummary() if ($debug);

# Can't have quiet and verbose:
printErrorHelpAndExit("Can't use both verbose and quiet options") if ( $verbose && $quiet );

#
# Verify the Include and Exclude files exists
#
printErrorHelpAndExit("Can't find exclude file ${excludeFile}") if ( ! -f $excludeFile );
printErrorHelpAndExit("Can't find include file ${includeFile}") if ( ! -f $includeFile );

#
# Compose the rsync options
#
push ( @rsyncOpts, "--dry-run") if ( $dryRun == $TRUE );

if ( $verbose ) {
  push ( @rsyncOpts, '--progress');
} else {
  push ( @rsyncOpts, '--stats');
}
push ( @rsyncOpts, "--exclude-from=" . $excludeFile );
push ( @rsyncOpts, "--include-from=" . $includeFile );

#
# Run the syncs, pausing any Antelope services as needed
#
foreach my $service (@services) { serviceStop($service);  }
foreach my $dir     (@syncdirs) { treeSync($dir);         }
foreach my $service (@services) { serviceStart($service); }
